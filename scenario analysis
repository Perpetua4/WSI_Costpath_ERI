import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

# Your data
data = pd.DataFrame({
    'WAI': [44150.4, 570801.6, 2283206.4, 1865780136, 454118.4, 53611.2, 2273745.6, 0, 5733244.8, 463579.2, 15768, 44150.4, 186062.4, 728481.6, 15768, 22075.2],
    'WQI': [1.660792919, 2.963261568, 1.218902971, 1.97657092, 0.640704676, 19.99922843, 0.784106972, 0.487146554, 0.846862809, 2.909131907, 0.737343604, 0.947842704, 2.846025364, 1.183940985, 0.737343604, 2.044479677],
    'ERI': [138, 302, 946, 632, 676, 198, 742, 481, 317, 535, 844, 212, 208, 642, 153, 776]
})

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Fit and transform the data
data_normalized = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)

# Set the figure size
sns.set(style="whitegrid", rc={"figure.figsize": (10, 8)})  # Adjust the size as needed

# Create the pairplot
sns.pairplot(data_normalized)
plt.suptitle('Normalized Pairwise Scatter Plots', y=1.02)  # y=1.02 puts the title a little above the plots
plt.show()

#Applying scenarios

import numpy as np

# Calculate quartiles for each variable
wai_quartiles = data['WAI'].quantile([0.25, 0.5, 0.75])
wqi_quartiles = data['WQI'].quantile([0.25, 0.5, 0.75])
eri_quartiles = data['ERI'].quantile([0.25, 0.5, 0.75])

# A function to classify scenarios based on the quartiles
def classify_scenario(row):
    wai_high = row['WAI'] >= wai_quartiles[0.75]
    wqi_high = row['WQI'] >= wqi_quartiles[0.75]
    eri_low = row['ERI'] <= eri_quartiles[0.25]
    wai_low = row['WAI'] <= wai_quartiles[0.25]
    wqi_low = row['WQI'] <= wqi_quartiles[0.25]
    
    if wai_high and wqi_high:
        return 'MESID'  # Most Efficient Supply Intake Development
    elif wai_high and not wqi_high and eri_low:
        return 'MESIO'  # Minimalist and Efficient Supply Intake Optimization
    elif wai_low and wqi_low and not eri_low:
        return 'LCMRD'  # Lowest Cost Maximum Resource Delivery
    elif not wai_low and not wqi_low and eri_low:
        return 'IRDev'  # Inequality Resource Development
    elif wai_high and not wqi_high and not eri_low:
        return 'RSIM'  # Reservoir Supply Intake Maximization
    else:
        return 'None'

# Apply the function to the DataFrame to create a new 'Scenario' column
data['Scenario'] = data.apply(classify_scenario, axis=1)

# Plot the pairplot with hue set to the new 'Scenario' column
sns.pairplot(data, hue='Scenario', plot_kws={'alpha': 0.5})
plt.suptitle('Pairwise Scatter Plots', y=1.02)  # Title slightly above the plots
plt.show()

#sensititvty analysis based on varying qaurtiles

import pandas as pd
import numpy as np

# Your data from the previous step
data = pd.DataFrame({
    # ... (your data goes here)
})

# Calculate the initial quartiles for WAI, WQI, and ERI
wai_quartiles = data['WAI'].quantile([0.25, 0.5, 0.75])
wqi_quartiles = data['WQI'].quantile([0.25, 0.5, 0.75])
eri_quartiles = data['ERI'].quantile([0.25, 0.5, 0.75])

# Function to classify each scenario based on WAI, WQI, and ERI quartiles
def classify_scenarios(row, wai_q, wqi_q, eri_q):
    # Determine high and low values based on quartiles
    wai_high = row['WAI'] >= wai_q[0.75]
    wqi_high = row['WQI'] >= wqi_q[0.75]
    eri_low = row['ERI'] <= eri_q[0.25]

    # Define the scenario names and their priority logic
    scenarios = {
        'MESIO': wai_high and wqi_high and not eri_low,
        'MESID': wai_high and wqi_high and eri_low,
        'LCMRD': not wai_high and not wqi_high and eri_low,
        'IRDev': wai_high and not wqi_high and not eri_low,
        'RSIM': not wai_high and wqi_high and not eri_low,
    }
    
    # Assign the scenario based on the priority logic
    for scenario, condition in scenarios.items():
        if condition:
            return scenario
    return 'Other'  # For rows that don't match any scenario

# Perform sensitivity analysis by adjusting the quartiles
def sensitivity_analysis(data, wai_q_delta, wqi_q_delta, eri_q_delta):
    # Adjust quartiles based on deltas
    adjusted_wai_quartiles = wai_quartiles + wai_q_delta * np.array([1, 1, 1])
    adjusted_wqi_quartiles = wqi_quartiles + wqi_q_delta * np.array([1, 1, 1])
    adjusted_eri_quartiles = eri_quartiles - eri_q_delta * np.array([1, 1, 1])  # Lower ERI is better

    # Classify scenarios with new quartiles
    data['Scenario'] = data.apply(lambda row: classify_scenarios(row, adjusted_wai_quartiles, adjusted_wqi_quartiles, adjusted_eri_quartiles), axis=1)

    # Return the scenario counts
    return data['Scenario'].value_counts()

# Example sensitivity analysis with deltas for each quartile
sensitivity_results = sensitivity_analysis(data, wai_q_delta=10000, wqi_q_delta=10, eri_q_delta=50)
print(sensitivity_results)

